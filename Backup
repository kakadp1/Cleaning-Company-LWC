import { LightningElement, api, track, wire } from 'lwc';
import {ShowToastEvent} from 'lightning/platformShowToastEvent';
import createAttachmentLink from '@salesforce/apex/mma2023_fieldsCompUploadFile.createDocumentLink';
import getAttachmentUrl from '@salesforce/apex/mma2023_fieldsCompUploadFile.questionFetchAttachment';
import getCurrentAttachmentlink from '@salesforce/apex/mma2023_fieldsCompUploadFile.getCurrentDocumentlink';
import deleteCurrentAttachment from '@salesforce/apex/mma2023_fieldsCompUploadFile.deleteCurrentAttachment';
import USER_ID from '@salesforce/user/Id';
import getCurrentUSerRole from '@salesforce/apex/SurveyTakerRole.getUserRole';
import { refreshApex } from '@salesforce/apex';

export default class Mma2023_fieldsComp extends LightningElement {
    ownerValue='';
    dateValue='';
    actionValue='';
    reviewerValue='';
    additionalValue='';
    reasonValue='';
    value;
    fileName='';
    file='';

    @track duplicates=[];
    @track id = 0;
    @track dup=0;
    @api selection;
    @api q;@api op;
    @api sqoid;
    get questionId()
    {
        return this.q ? this.q.sqrid:'123456789012345';
    }
    optionArr =[]
     
    @api isDisabled = false;
    @api Key;
    
    @api
    get surveytakers(){
        return this.optionArr;
    }
    set surveytakers(value){
        value.forEach(each=>{
            this.optionArr.push({value:each.Id,label:each.UserName__c})
        })
    } 
    
    handleChangeio(event){
        console.log('onchange',event.detail.value);
        this.isDisabled = true;
        this.duplicates[event.currentTarget.dataset.index].ownerValue = event.detail.value;
        console.log('this.duplicates : : ', this.duplicates);
        console.log('index :: ',event.currentTarget.dataset.index);
    }
    questionNo='default';
    handleOwnerChange(event){
        console.log('q>'+JSON.stringify(this.q));
        console.log('s>'+JSON.stringify(this.sqoid).length);
        let x=event.target.title;
        this.dispatchEvent(new CustomEvent('changes'));
        if(x=='ownerName')
        {
        console.log('CHAGE IS')
        console.log('CHANGED  TARGET OWNER IS ',event.target.value)
        console.log('CHANGED DETAIL OWNER IS ',event.detail.value)
        this.ownerValue = event.target.value;
        if(this.q.actionPlan!="" && this.q.dateToBeCompleted!="" && (this.sOption!='0'|| this.sOption!='5'))
        { 
         if(JSON.stringify(this.sqoid).length>2 && this.questionNo==event.target.dataset.name)
         {
          let zys=JSON.parse(JSON.stringify(this.sqoid));
          let sqo=zys.find(ques=>(ques.questionId==event.target.dataset.name))
          console.log('sqo>'+JSON.stringify(sqo));
          if(sqo.actionPlan!="" || sqo.dateToBeCompleted!="")
          {
            const filterChangeEvent = new CustomEvent('filterchange', {
                bubbles: true, composed:true,detail: {'ownerName':event.target.value,'dateToBeCompleted':this.sqoid.dateToBeCompleted,'actionPlan':this.sqoid.actionPlan,'questionId':
                event.target.dataset.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
            });
            this.dispatchEvent(filterChangeEvent);
          }
          else
          {
            const filterChangeEvent = new CustomEvent('filterchange', {
                bubbles: true, composed:true,detail: {'ownerName':event.target.value,'dateToBeCompleted':this.q.dateToBeCompleted,'actionPlan':this.q.actionPlan,'questionId':
                event.target.dataset.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
            });
            this.dispatchEvent(filterChangeEvent);
          }
        }
        else
        {
        const filterChangeEvent = new CustomEvent('filterchange', {
            bubbles: true, composed:true,detail: {'ownerName':event.target.value,'dateToBeCompleted':this.q.dateToBeCompleted,'actionPlan':this.q.actionPlan,'questionId':
            event.target.dataset.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
        });
        this.dispatchEvent(filterChangeEvent);
        this.questionNo=event.target.dataset.name;
           }
        }
        else
        {
            const filterChangeEvent = new CustomEvent('filterchange', {
                bubbles: true, composed:true,detail: {'ownerName':event.target.value,'questionId':
                event.target.dataset.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
            });
            this.dispatchEvent(filterChangeEvent); 
        }
        }
        
        
        else if(x=='ownerName1')
        {
        console.log('CHAGE IS')
        console.log('CHANGED  TARGET OWNER IS ',event.target.value)
        console.log('CHANGED DETAIL OWNER IS ',event.detail.value)
        this.ownerValue = event.target.value;
        if(this.q.actionPlan!="" && this.q.dateToBeCompleted!="" && this.q.ownerName!="" && (this.sOption!='0'|| this.sOption!='5'))
        { 
         if(JSON.stringify(this.sqoid).length>2 && this.questionNo==event.target.dataset.name)
         {
          let zys=JSON.parse(JSON.stringify(this.sqoid));
          let sqo=zys.find(ques=>(ques.questionId==event.target.dataset.name))
          console.log('sqo>'+JSON.stringify(sqo));
          if(sqo.actionPlan!="" || sqo.dateToBeCompleted!="" || sqo.ownerName!="")
          {
            const filterChangeEvent = new CustomEvent('filterchange', {
                bubbles: true, composed:true,detail: {'ownerName1':event.target.value,'dateToBeCompleted':this.sqoid.dateToBeCompleted,'actionPlan':this.sqoid.actionPlan,'ownerName':this.sqoid.ownerName,'questionId':
                event.target.dataset.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
            });
            this.dispatchEvent(filterChangeEvent);
          }
          else
          {
            const filterChangeEvent = new CustomEvent('filterchange', {
                bubbles: true, composed:true,detail: {'ownerName1':event.target.value,'dateToBeCompleted':this.q.dateToBeCompleted,'actionPlan':this.q.actionPlan,'ownerName':this.q.ownerName,'questionId':
                event.target.dataset.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
            });
            this.dispatchEvent(filterChangeEvent);
          }
        }
        else
        {
        const filterChangeEvent = new CustomEvent('filterchange', {
            bubbles: true, composed:true,detail: {'ownerName1':event.target.value,'dateToBeCompleted':this.q.dateToBeCompleted,'actionPlan':this.q.actionPlan,'ownerName':this.q.ownerName,'questionId':
            event.target.dataset.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
        });
        this.dispatchEvent(filterChangeEvent);
        this.questionNo=event.target.dataset.name;
           }
        }
        else
        {
            const filterChangeEvent = new CustomEvent('filterchange', {
                bubbles: true, composed:true,detail: {'ownerName1':event.target.value,'questionId':
                event.target.dataset.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
            });
            this.dispatchEvent(filterChangeEvent); 
        }
        } 
        
        else if(x=='ownerName2')
        {
        console.log('CHAGE IS')
        console.log('CHANGED  TARGET OWNER IS ',event.target.value)
        console.log('CHANGED DETAIL OWNER IS ',event.detail.value)
        if(this.q.actionPlan!="" && this.q.dateToBeCompleted!="" && this.q.ownerName!="" && (this.sOption!='0'|| this.sOption!='5'))
        { 
         if(JSON.stringify(this.sqoid).length>2 && this.questionNo==event.target.dataset.name)
         {
          let zys=JSON.parse(JSON.stringify(this.sqoid));
          let sqo=zys.find(ques=>(ques.questionId==event.target.dataset.name))
          console.log('sqo>'+JSON.stringify(sqo));
          if(sqo.actionPlan!="" || sqo.dateToBeCompleted!="" || sqo.ownerName!="")
          {
            const filterChangeEvent = new CustomEvent('filterchange', {
                bubbles: true, composed:true,detail: {'ownerName2':event.target.value,'dateToBeCompleted':this.sqoid.dateToBeCompleted,'actionPlan':this.sqoid.actionPlan,'ownerName':this.sqoid.ownerName,'questionId':
                event.target.dataset.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
            });
            this.dispatchEvent(filterChangeEvent);
          }
          else
          {
            const filterChangeEvent = new CustomEvent('filterchange', {
                bubbles: true, composed:true,detail: {'ownerName2':event.target.value,'dateToBeCompleted':this.q.dateToBeCompleted,'actionPlan':this.q.actionPlan,'ownerName':this.q.ownerName,'questionId':
                event.target.dataset.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
            });
            this.dispatchEvent(filterChangeEvent);
          }
        }
        else
        {
        const filterChangeEvent = new CustomEvent('filterchange', {
            bubbles: true, composed:true,detail: {'ownerName2':event.target.value,'dateToBeCompleted':this.q.dateToBeCompleted,'actionPlan':this.q.actionPlan,'ownerName':this.q.ownerName,'questionId':
            event.target.dataset.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
        });
        this.dispatchEvent(filterChangeEvent);
        this.questionNo=event.target.dataset.name;
           }
        }
        else
        {
            const filterChangeEvent = new CustomEvent('filterchange', {
                bubbles: true, composed:true,detail: {'ownerName2':event.target.value,'questionId':
                event.target.dataset.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
            });
            this.dispatchEvent(filterChangeEvent); 
        }
    }
}

    handleDateChange(event) {
        // Get the string of the "value" attribute on the selected option
        let x=event.target.title;
        this.dispatchEvent(new CustomEvent('changes'));
        if(x=='date')
        {
        this.dateValue =new Date(event.target.value);
        var todaysDate = new Date();
        let timediff = this.dateValue.getTime() - todaysDate.getTime();
        let dayDiff = timediff/(1000*3600*24);
        if(dayDiff>30){
            this.showToast('Error!!','Completion Date should be within 30 days of Assessment Creation Date','error');
            event.target.value = '';
        }else if(dayDiff<0){
            this.showToast('Error!!','Date to be Completed should be not be less than today','error');
            event.target.value = '';
        }
        console.log('DATE CHANGED === ',this.dateValue,todaysDate,dayDiff);
        if(this.q.actionPlan!="" && this.q.ownerName!="")
        {
         if(event.target.value!=null && event.target.value!='' && event.target.value!=undefined)
         {
            if(JSON.stringify(this.sqoid).length>2 && this.questionNo==event.target.name)
           {
             let zys=JSON.parse(JSON.stringify(this.sqoid));
             let sqo=zys.find(ques=>(ques.questionId==event.target.name))
              if(sqo.actionPlan!="" || sqo.ownerName!="")
              { 
                const filterChangeEvent = new CustomEvent('filterchange', {
                bubbles: true, composed:true,detail: {'dateToBeCompleted': event.target.value,'actionPlan':this.sqoid.actionPlan,'ownerName':this.sqoid.ownerName,'questionId':
                event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
                });
                this.dispatchEvent(filterChangeEvent);
              }
              else
              {
                const filterChangeEvent = new CustomEvent('filterchange', {
                    bubbles: true, composed:true,detail: {'dateToBeCompleted': event.target.value,'actionPlan':this.q.actionPlan,'ownerName':this.q.ownerName,'questionId':
                    event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
                });
                this.dispatchEvent(filterChangeEvent);
              }
           }
           else
           {
             const filterChangeEvent = new CustomEvent('filterchange', {
                 bubbles: true, composed:true,detail: {'dateToBeCompleted': event.target.value,'actionPlan':this.q.actionPlan,'ownerName':this.q.ownerName,'questionId':
                 event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
             });
             this.dispatchEvent(filterChangeEvent);
             this.questionNo=event.target.name;
           }
        }
        else{
            const filterChangeEvent = new CustomEvent('filterchange', {
                bubbles: true, composed:true,detail: {'dateToBeCompleted':'delete','actionPlan':this.q.actionPlan,'ownerName':this.q.ownerName,'questionId':
                event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
            });
            this.dispatchEvent(filterChangeEvent);
        }
       }
       else
       {
        if(event.target.value!=null && event.target.value!='' && event.target.value!=undefined){
            const filterChangeEvent = new CustomEvent('filterchange', {
                bubbles: true, composed:true,detail: {'dateToBeCompleted': event.target.value,'questionId':
                event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
            });
            this.dispatchEvent(filterChangeEvent);
            }
            else{
                const filterChangeEvent = new CustomEvent('filterchange', {
                    bubbles: true, composed:true,detail: {'dateToBeCompleted':'delete','questionId':
                    event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
                });
                this.dispatchEvent(filterChangeEvent);
            }
       }
    }
        else if(x=='date1')
        {
            this.dateValue =new Date(event.target.value);
            var todaysDate = new Date();
            let timediff = this.dateValue.getTime() - todaysDate.getTime();
            let dayDiff = timediff/(1000*3600*24);
            if(dayDiff>30){
                this.showToast('Error!!','Completion Date should be within 30 days of Assessment Creation Date','error');
                event.target.value = '';
            }else if(dayDiff<0){
                this.showToast('Error!!','Date to be Completed should be not be less than today','error');
                event.target.value = '';
            }
            console.log('DATE CHANGED === ',this.dateValue,todaysDate,dayDiff);
        if(this.q.actionPlan!="" && this.q.ownerName!="" && this.q.dateToBeCompleted!="")
        {
         if(event.target.value!=null && event.target.value!='' && event.target.value!=undefined)
         {
            if(JSON.stringify(this.sqoid).length>2 && this.questionNo==event.target.name)
           {
             let zys=JSON.parse(JSON.stringify(this.sqoid));
             let sqo=zys.find(ques=>(ques.questionId==event.target.name))
              if(sqo.actionPlan!="" || sqo.ownerName!="" || sqo.dateToBeCompleted!="")
              { 
                const filterChangeEvent = new CustomEvent('filterchange', {
                bubbles: true, composed:true,detail: {'dateToBeCompleted1': event.target.value,'dateToBeCompleted':this.sqoid.dateToBeCompleted,'actionPlan':this.sqoid.actionPlan,'ownerName':this.sqoid.ownerName,'questionId':
                event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
                });
                this.dispatchEvent(filterChangeEvent);
              }
              else
              {
                const filterChangeEvent = new CustomEvent('filterchange', {
                    bubbles: true, composed:true,detail: {'dateToBeCompleted1': event.target.value,'dateToBeCompleted':this.q.dateToBeCompleted,'actionPlan':this.q.actionPlan,'ownerName':this.q.ownerName,'questionId':
                    event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
                });
                this.dispatchEvent(filterChangeEvent);
              }
           }
           else
           {
             const filterChangeEvent = new CustomEvent('filterchange', {
                 bubbles: true, composed:true,detail: {'dateToBeCompleted1': event.target.value,'dateToBeCompleted':this.q.dateToBeCompleted,'actionPlan':this.q.actionPlan,'ownerName':this.q.ownerName,'questionId':
                 event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
             });
             this.dispatchEvent(filterChangeEvent);
             this.questionNo=event.target.name;
           }
        }
        else{
            const filterChangeEvent = new CustomEvent('filterchange', {
                bubbles: true, composed:true,detail: {'dateToBeCompleted1':'delete','dateToBeCompleted':this.q.dateToBeCompleted,'actionPlan':this.q.actionPlan,'ownerName':this.q.ownerName,'questionId':
                event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
            });
            this.dispatchEvent(filterChangeEvent);
        }
       }
       else
       {
        if(event.target.value!=null && event.target.value!='' && event.target.value!=undefined){
            const filterChangeEvent = new CustomEvent('filterchange', {
                bubbles: true, composed:true,detail: {'dateToBeCompleted1': event.target.value,'questionId':
                event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
            });
            this.dispatchEvent(filterChangeEvent);
            }
            else{
                const filterChangeEvent = new CustomEvent('filterchange', {
                    bubbles: true, composed:true,detail: {'dateToBeCompleted1':'delete','questionId':
                    event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
                });
                this.dispatchEvent(filterChangeEvent);
            }
       }
           
        }
        else if(x=='date2')
        {
            this.dateValue =new Date(event.target.value);
            var todaysDate = new Date();
            let timediff = this.dateValue.getTime() - todaysDate.getTime();
            let dayDiff = timediff/(1000*3600*24);
            if(dayDiff>30){
                this.showToast('Error!!','Completion Date should be within 30 days of Assessment Creation Date','error');
                event.target.value = '';
            }else if(dayDiff<0){
                this.showToast('Error!!','Date to be Completed should be not be less than today','error');
                event.target.value = '';
            }
            console.log('DATE CHANGED === ',this.dateValue,todaysDate,dayDiff);
            if(this.q.actionPlan!="" && this.q.ownerName!="" && this.q.dateToBeCompleted!="")
            {
             if(event.target.value!=null && event.target.value!='' && event.target.value!=undefined)
             {
                if(JSON.stringify(this.sqoid).length>2 && this.questionNo==event.target.name)
               {
                 let zys=JSON.parse(JSON.stringify(this.sqoid));
                 let sqo=zys.find(ques=>(ques.questionId==event.target.name))
                  if(sqo.actionPlan!="" || sqo.ownerName!="" || sqo.dateToBeCompleted!="")
                  { 
                    const filterChangeEvent = new CustomEvent('filterchange', {
                    bubbles: true, composed:true,detail: {'dateToBeCompleted2': event.target.value,'dateToBeCompleted':this.sqoid.dateToBeCompleted,'actionPlan':this.sqoid.actionPlan,'ownerName':this.sqoid.ownerName,'questionId':
                    event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
                    });
                    this.dispatchEvent(filterChangeEvent);
                  }
                  else
                  {
                    const filterChangeEvent = new CustomEvent('filterchange', {
                        bubbles: true, composed:true,detail: {'dateToBeCompleted2': event.target.value,'dateToBeCompleted':this.q.dateToBeCompleted,'actionPlan':this.q.actionPlan,'ownerName':this.q.ownerName,'questionId':
                        event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
                    });
                    this.dispatchEvent(filterChangeEvent);
                  }
               }
               else
               {
                 const filterChangeEvent = new CustomEvent('filterchange', {
                     bubbles: true, composed:true,detail: {'dateToBeCompleted2': event.target.value,'dateToBeCompleted':this.q.dateToBeCompleted,'actionPlan':this.q.actionPlan,'ownerName':this.q.ownerName,'questionId':
                     event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
                 });
                 this.dispatchEvent(filterChangeEvent);
                 this.questionNo=event.target.name;
               }
            }
            else{
                const filterChangeEvent = new CustomEvent('filterchange', {
                    bubbles: true, composed:true,detail: {'dateToBeCompleted2':'delete','dateToBeCompleted':this.q.dateToBeCompleted,'actionPlan':this.q.actionPlan,'ownerName':this.q.ownerName,'questionId':
                    event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
                });
                this.dispatchEvent(filterChangeEvent);
            }
           }
           else
           {
            if(event.target.value!=null && event.target.value!='' && event.target.value!=undefined){
                const filterChangeEvent = new CustomEvent('filterchange', {
                    bubbles: true, composed:true,detail: {'dateToBeCompleted2': event.target.value,'questionId':
                    event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
                });
                this.dispatchEvent(filterChangeEvent);
                }
                else{
                    const filterChangeEvent = new CustomEvent('filterchange', {
                        bubbles: true, composed:true,detail: {'dateToBeCompleted2':'delete','questionId':
                        event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
                    });
                    this.dispatchEvent(filterChangeEvent);
                }
           }
        }
    }

    handleActionChange(event) {
        let x=event.target.title;
        this.dispatchEvent(new CustomEvent('changes'));
        console.log(event.target.title);
        if(x=='actionPlan')
        {
        //this.actionValue = event.target.value;
        console.log('ACTION PLAN :: ',event.target.value);
        console.log('sqrid :: ',event.target.dataset.id);
        console.log('type :: ',event.target.dataset.type);
        console.log('Sub type :: ',event.target.dataset.subtype);
        if(this.q.ownerName!="" && this.q.dateToBeCompleted!="")
        {
        if(event.target.value!=null && event.target.value!='' && event.target.value!=undefined){
            if(JSON.stringify(this.sqoid).length>2 && this.questionNo==event.target.name)
            {
              let zys=JSON.parse(JSON.stringify(this.sqoid));
              let sqo=zys.find(ques=>(ques.questionId==event.target.name))
               if(sqo.dateToBeCompleted!="" || sqo.ownerName!="")
               { 
                const filterChangeEvent = new CustomEvent('filterchange', {// true to false
                    bubbles: false, composed:false,detail: {'actionPlan': event.target.value,'ownerName':this.sqoid.ownerName,'dateToBeCompleted':this.sqoid.dateToBeCompleted,'questionId':
                    event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
                });
                this.dispatchEvent(filterChangeEvent);
               }
               else
               {
                const filterChangeEvent = new CustomEvent('filterchange', {// true to false
                    bubbles: false, composed:false,detail: {'actionPlan': event.target.value,'ownerName':this.q.ownerName,'dateToBeCompleted':this.q.dateToBeCompleted,'questionId':
                    event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
                });
                this.dispatchEvent(filterChangeEvent);
               }
            }
            else
            {
                const filterChangeEvent = new CustomEvent('filterchange', {// true to false
                    bubbles: false, composed:false,detail: {'actionPlan': event.target.value,'ownerName':this.q.ownerName,'dateToBeCompleted':this.q.dateToBeCompleted,'questionId':
                    event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
                });
                this.dispatchEvent(filterChangeEvent);
                this.questionNo=event.target.name;
            }
       }
       else
       {
        const filterChangeEvent = new CustomEvent('filterchange', {// true to false
            bubbles: false, composed:false,detail: {'actionPlan':'delete','ownerName':this.q.ownerName,'dateToBeCompleted':this.q.dateToBeCompleted,'questionId':
            event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
        });
        this.dispatchEvent(filterChangeEvent);
       }
      }
      else
      {
        if(event.target.value!=null && event.target.value!='' && event.target.value!=undefined){
            const filterChangeEvent = new CustomEvent('filterchange', {// true to false
                bubbles: false, composed:false,detail: {'actionPlan': event.target.value,'questionId':
                event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
            });
            this.dispatchEvent(filterChangeEvent);
           }
           else
           {
            const filterChangeEvent = new CustomEvent('filterchange', {// true to false
                bubbles: false, composed:false,detail: {'actionPlan':'delete','questionId':
                event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
            });
            this.dispatchEvent(filterChangeEvent);
           }
      }
    }
       else if(x=='actionPlan1')
       {
        //this.actionValue = event.target.value;
        console.log('ACTION PLAN :: ',event.target.value);
        console.log('sqrid :: ',event.target.dataset.id);
        console.log('type :: ',event.target.dataset.type);
        console.log('Sub type :: ',event.target.dataset.subtype);
        if(this.q.ownerName!="" && this.q.dateToBeCompleted!="" && this.q.actionPlan!="")
        {
        if(event.target.value!=null && event.target.value!='' && event.target.value!=undefined){
            if(JSON.stringify(this.sqoid).length>2 && this.questionNo==event.target.name)
            {
              let zys=JSON.parse(JSON.stringify(this.sqoid));
              let sqo=zys.find(ques=>(ques.questionId==event.target.name))
               if(sqo.dateToBeCompleted!="" || sqo.ownerName!="" || sqo.actionPlan!="")
               { 
                const filterChangeEvent = new CustomEvent('filterchange', {// true to false
                    bubbles: false, composed:false,detail: {'actionPlan1': event.target.value,'actionPlan':this.sqoid.actionPlan,'ownerName':this.sqoid.ownerName,'dateToBeCompleted':this.sqoid.dateToBeCompleted,'questionId':
                    event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
                });
                this.dispatchEvent(filterChangeEvent);
               }
               else
               {
                const filterChangeEvent = new CustomEvent('filterchange', {// true to false
                    bubbles: false, composed:false,detail: {'actionPlan1': event.target.value,'actionPlan':this.q.actionPlan,'ownerName':this.q.ownerName,'dateToBeCompleted':this.q.dateToBeCompleted,'questionId':
                    event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
                });
                this.dispatchEvent(filterChangeEvent);
               }
            }
            else
            {
                const filterChangeEvent = new CustomEvent('filterchange', {// true to false
                    bubbles: false, composed:false,detail: {'actionPlan1': event.target.value,'actionPlan':this.q.actionPlan,'ownerName':this.q.ownerName,'dateToBeCompleted':this.q.dateToBeCompleted,'questionId':
                    event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
                });
                this.dispatchEvent(filterChangeEvent);
                this.questionNo=event.target.name;
            }
       }
       else
       {
        const filterChangeEvent = new CustomEvent('filterchange', {// true to false
            bubbles: false, composed:false,detail: {'actionPlan1':'delete','actionPlan':this.q.actionPlan,'ownerName':this.q.ownerName,'dateToBeCompleted':this.q.dateToBeCompleted,'questionId':
            event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
        });
        this.dispatchEvent(filterChangeEvent);
       }
      }
      else
      {
        if(event.target.value!=null && event.target.value!='' && event.target.value!=undefined){
            const filterChangeEvent = new CustomEvent('filterchange', {// true to false
                bubbles: false, composed:false,detail: {'actionPlan1': event.target.value,'questionId':
                event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
            });
            this.dispatchEvent(filterChangeEvent);
           }
           else
           {
            const filterChangeEvent = new CustomEvent('filterchange', {// true to false
                bubbles: false, composed:false,detail: {'actionPlan1':'delete','questionId':
                event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
            });
            this.dispatchEvent(filterChangeEvent);
           }
      }
       }
       else if(x=='actionPlan2')
       {
        //this.actionValue = event.target.value;
        console.log('ACTION PLAN :: ',event.target.value);
        console.log('sqrid :: ',event.target.dataset.id);
        console.log('type :: ',event.target.dataset.type);
        console.log('Sub type :: ',event.target.dataset.subtype);
        if(this.q.ownerName!="" && this.q.dateToBeCompleted!="" && this.q.actionPlan!="")
        {
        if(event.target.value!=null && event.target.value!='' && event.target.value!=undefined){
            if(JSON.stringify(this.sqoid).length>2 && this.questionNo==event.target.name)
            {
              let zys=JSON.parse(JSON.stringify(this.sqoid));
              let sqo=zys.find(ques=>(ques.questionId==event.target.name))
               if(sqo.dateToBeCompleted!="" || sqo.ownerName!="" || sqo.actionPlan!="")
               { 
                const filterChangeEvent = new CustomEvent('filterchange', {// true to false
                    bubbles: false, composed:false,detail: {'actionPlan2': event.target.value,'actionPlan':this.sqoid.actionPlan,'ownerName':this.sqoid.ownerName,'dateToBeCompleted':this.sqoid.dateToBeCompleted,'questionId':
                    event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
                });
                this.dispatchEvent(filterChangeEvent);
               }
               else
               {
                const filterChangeEvent = new CustomEvent('filterchange', {// true to false
                    bubbles: false, composed:false,detail: {'actionPlan2': event.target.value,'actionPlan':this.q.actionPlan,'ownerName':this.q.ownerName,'dateToBeCompleted':this.q.dateToBeCompleted,'questionId':
                    event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
                });
                this.dispatchEvent(filterChangeEvent);
               }
            }
            else
            {
                const filterChangeEvent = new CustomEvent('filterchange', {// true to false
                    bubbles: false, composed:false,detail: {'actionPlan2': event.target.value,'actionPlan':this.q.actionPlan,'ownerName':this.q.ownerName,'dateToBeCompleted':this.q.dateToBeCompleted,'questionId':
                    event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
                });
                this.dispatchEvent(filterChangeEvent);
                this.questionNo=event.target.name;
            }
       }
       else
       {
        const filterChangeEvent = new CustomEvent('filterchange', {// true to false
            bubbles: false, composed:false,detail: {'actionPlan2':'delete','actionPlan':this.q.actionPlan,'ownerName':this.q.ownerName,'dateToBeCompleted':this.q.dateToBeCompleted,'questionId':
            event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
        });
        this.dispatchEvent(filterChangeEvent);
       }
      }
      else
      {
        if(event.target.value!=null && event.target.value!='' && event.target.value!=undefined){
            const filterChangeEvent = new CustomEvent('filterchange', {// true to false
                bubbles: false, composed:false,detail: {'actionPlan2': event.target.value,'questionId':
                event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
            });
            this.dispatchEvent(filterChangeEvent);
           }
           else
           {
            const filterChangeEvent = new CustomEvent('filterchange', {// true to false
                bubbles: false, composed:false,detail: {'actionPlan2':'delete','questionId':
                event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
            });
            this.dispatchEvent(filterChangeEvent);
           }
        }
    }
}

    handleReviwerChange(event) {
        this.dispatchEvent(new CustomEvent('changes'));
        
        this.reviewerValue = event.target.value;
        const filterChangeEvent = new CustomEvent('filterchange', {
            bubbles: true, composed:true,detail: {'reviewerComments': event.target.value,'questionId':
            event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
        });
        this.dispatchEvent(filterChangeEvent);
    }

    handleAdditionalChange(event) {
        this.dispatchEvent(new CustomEvent('changes'));
        if(this.q.actionPlan!="" && this.q.ownerName!="" && this.q.dateToBeCompleted!="" && this.sOption!='5'){
            if(this.q.reasonForNotApplicable!=""){
        this.additionalValue = event.target.value;
        const filterChangeEvent = new CustomEvent('filterchange', {
            bubbles: true, composed:true,detail: {'additionalComments': event.target.value,'actionPlan':this.q.actionPlan,'ownerName':this.q.ownerName,'dateToBeCompleted':this.q.dateToBeCompleted,'reasonForNotApplicable':'','questionId':
            event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
        });
        this.dispatchEvent(filterChangeEvent);
       }
       else
       {
        this.additionalValue = event.target.value;
        const filterChangeEvent = new CustomEvent('filterchange', {
            bubbles: true, composed:true,detail: {'additionalComments': event.target.value,'actionPlan':this.q.actionPlan,'ownerName':this.q.ownerName,'dateToBeCompleted':this.q.dateToBeCompleted,'questionId':
            event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
        });
        this.dispatchEvent(filterChangeEvent);
       }
    }
    else{
        this.additionalValue = event.target.value;
        const filterChangeEvent = new CustomEvent('filterchange', {
            bubbles: true, composed:true,detail: {'additionalComments': event.target.value,'questionId':
            event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
        });
        this.dispatchEvent(filterChangeEvent);
        }
    }

    handleReasonChange(event) {
        this.dispatchEvent(new CustomEvent('changes'));
        if(this.q.actionPlan!="" && this.q.ownerName!="" && this.q.dateToBeCompleted!=""){
        if(this.q.additionalComments!=""){
        this.reasonValue = event.target.value;
        const filterChangeEvent = new CustomEvent('filterchange', {
            bubbles: true, composed:true,detail: {'reasonForNotApplicable': event.target.value,'actionPlan':'','ownerName':'','dateToBeCompleted':'','additionalComments':'','questionId':
            event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
        });
        this.dispatchEvent(filterChangeEvent);
       }
       else{
        this.reasonValue = event.target.value;
        const filterChangeEvent = new CustomEvent('filterchange', {
            bubbles: true, composed:true,detail: {'reasonForNotApplicable': event.target.value,'actionPlan':'','ownerName':'','dateToBeCompleted':'','questionId':
            event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
        });
        this.dispatchEvent(filterChangeEvent);
       }
      }
      else{
        this.reasonValue = event.target.value;
        const filterChangeEvent = new CustomEvent('filterchange', {
            bubbles: true, composed:true,detail: {'reasonForNotApplicable': event.target.value,'actionPlan':'','ownerName':'','dateToBeCompleted':'','additionalComments':'','questionId':
            event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
        });
        this.dispatchEvent(filterChangeEvent);
      }
    }
    
    

    // handleUploadFinished(event) {

    //     if (event.target.files.length > 0) {

    //         this.fileName = event.target.files[0].name;
    //         this.file = this.uploadedFiles[0];
    //         var fileSize = Math.round(this.file.size / 1024);
    //         console.log('fileSize', fileSize);
    //         if (fileSize > 120) {
    //             this.showToast('Error!!', "File size should be less than or equal to 120KB", 'error');
    //             event.target.value = '';
    //         }
    //     }
    // }
    //UploadAttachment handling

    get acceptedFormats() {
        return ['.pdf', '.png'];
    }
    wireAttachmentData=[];AttachmentData=[];haveAttachment=false;haveCurrentAttachment=false;existingAttachment='';
    @wire(getAttachmentUrl,{quesId:'$questionId'})
    getAttachmentWire(result)
    {
        this.wireAttachmentData=result;
        if(result.data!=null)
        {
            let url = [];
            result.data.forEach((element) => {
                    let rowData = {}
                    rowData.name = element.Name;
                    rowData.link = element.DistributionPublicUrl;
                    rowData.id=element.ContentDocumentId;
                    url.push(rowData);
            })
            this.AttachmentData=url;
            console.log('AttachmentData>'+JSON.stringify(this.AttachmentData));
            this.haveAttachment=true;
            console.log('have attachment>'+this.haveAttachment);
            refreshApex(this.wireAttachmentData);
            if(this.haveAttachment)
         {  
            let x='';let y='';
            for(let i=0;i<this.AttachmentData.length;i++)
            {
               x=x+this.AttachmentData[i].id+',';
            }
            this.existingAttachment=x;
         }

        }
        else
        {
            console.log('Data from wire is null');
            console.log('have attachment>'+this.haveAttachment);
        }
        if(result.error)
        {
            console.log('Data Error in get url');
        }
    }
    documentId=[];currentAttachment=[];wireCurrentAttachment=[];attachemntadded=false;
    @wire(getCurrentAttachmentlink,{documentId:'$documentId'})
    getCurrentAttachmentWire(result)
    {
        this.wireCurrentAttachment=result;
        if(result.data!=null)
        {   this.currentAttachment=[];
            let url = [];
            result.data.forEach((element) => {
                    let rowData = {}
                    rowData.name = element.Name;
                    rowData.link = element.DistributionPublicUrl;
                    rowData.id=element.ContentDocumentId;
                    url.push(rowData);
            })
            console.log('wireUrl>'+JSON.stringify(url));
            this.currentAttachment=url;
            console.log('crtAttach>+'+JSON.stringify(this.currentAttachment));
            this.haveCurrentAttachment=true;
            if(this.haveCurrentAttachment)
            {  refreshApex(this.wireAttachmentData);
               let x='';let y='';
               for(let i=0;i<this.currentAttachment.length;i++)
               {
                  x=x+this.currentAttachment[i].id+',';
                  y=y+this.currentAttachment[i].link+',';
               }
               if(this.existingAttachment!='')
               {
               x=x+this.existingAttachment;
               }
               const filterChangeEvent = new CustomEvent('filterchange', {
                   bubbles: true, composed:true,detail: {'attachmentName':x,'attachmentUrl':y,'questionId':
                   this.qid,'sqrid':this.srid,'type':this.pt,'subType':this.st}
               });
               this.dispatchEvent(filterChangeEvent);
               this.attachemntadded=true;
            }
            
        }
        else
        {
            console.log('Data from Current Attachmentwire is null');
            this.currentAttachment=[];
            this.haveCurrentAttachment=false;
            console.log('have current attachment>'+this.haveCurrentAttachment);
            if(this.haveCurrentAttachment==false && this.attachemntadded==true)
            {  
               const filterChangeEvent = new CustomEvent('filterchange', {
                   bubbles: true, composed:true,detail: {'attachmentName':'delete','attachmentUrl':'delete','questionId':
                   this.qid,'sqrid':this.srid,'type':this.pt,'subType':this.st}
               });
               this.dispatchEvent(filterChangeEvent);
            }
        }
        if(result.error)
        {
            console.log('Data Error in get url');
        }
    }
    qid;srid;pt;st;
    handleUploadFinished(event)
    {   
        let x=[];
        let y=[];
        this.qid=event.target.name;
        this.srid=event.target.dataset.id;
        this.pt=event.target.dataset.type;
        this.st=event.target.dataset.subtype;
        const uploadedFiles = event.detail.files;
        console.log('No. of files uploaded : ' + uploadedFiles.length);
        for (let i = 0; i < uploadedFiles.length; i++) {
            x.push(uploadedFiles[i].documentId);
            console.log('handleUpload x>'+x);
         }
         if(this.documentId==[])
         {
         this.documentId=x;
         }
         else
         { 
           let z=[];
           z=this.documentId;
          //this.documentId=[];
           y=z.concat(x);
         }
         console.log('handleUpload>'+this.documentId);
         createAttachmentLink({documentId:x})
         .then((result)=>{
            this.documentId=y;
            refreshApex(this.wireCurrentAttachment);
            refreshApex(this.wireAttachmentData);
            this.showToast('SuccessFull Uploaded','No. of files uploaded : ' + uploadedFiles.length,'success')
         })
         .catch((error)=>{
            console.log('Unsuccess Upload File may already exist')
            this.showToast('UnSuccess Uploaded','No. of files not uploaded : ' + uploadedFiles.length,'error')
         })
         
    }
    deleteAttachment(event)
    {   
        //this.documentId=[];
        let x=event.target.dataset.identity;
        let y=event.target.dataset.name;
        let i=this.currentAttachment.map(object => object.id).indexOf(x);
        this.currentAttachment.splice(i,1);
        let z=[];
        for(let c=0;c<this.currentAttachment.length;c++)
        {
            z.push(this.currentAttachment[c].id);
        }
        deleteCurrentAttachment({AttachmentId:x})
        .then((result)=>{
            if(result=='deleted')
            {
            this.documentId=z;
            this.showToast('Deleted '+y,'Attachment Successfully Deleted','success')
            refreshApex(this.wireCurrentAttachment);
            }
        })
        .catch((error)=>{
            console.log(`Unsuccessfull to delete ${error}`);
            this.showToast('Error','Error occurs while Deleting Attachment '+y,'error')
        })
    }
    wireUserData;UserRole;
    @wire(getCurrentUSerRole,{id:USER_ID})
    wireUSerRole(result)
    {
      this.wireUserData=result;
      if(result.data)
      {
        this.UserRole=result.data;
        console.log('userRole>'+this.UserRole);
        refreshApex(this.wireUserData);
      }
      if(result.error)
      {
        console.log(result.error)
      }
    }
    @api surveySubmit;
    get aDisable()
    {
        return (this.q.selectedOption!=='0'||this.q.selectedOption!=='5') && (this.surveySubmit==true && this.UserRole=='Admin') ? true:
                (this.sOption!=0||this.sOption!=5) && this.sOption!=''? false:
                this.q.selectedOption==='0'||this.q.selectedOption==='5' ? true:false;
    }

    get aDisableRow()
    {
        return (this.q.selectedOption!=='0'||this.q.selectedOption!=='5') && (this.surveySubmit==true && this.UserRole=='Admin') ? true:
        (this.q.selectedOption!=='0'||this.q.selectedOption!=='5') && (this.surveySubmit==true && this.UserRole=='Auditor') ? false:
        (this.sOption!=0||this.sOption!=5) && this.sOption!=''? false:
        this.q.selectedOption==='0'||this.q.selectedOption==='5' ? true:false;
    }

    get adDisable()
    {
        return this.q.selectedOption==='0' ? true:
               this.q.selectedOption==='5' ? false:false;
               
    }
    get rcDisable()
    {
        return (this.q.selectedOption==='0' || this.q.selectedOption==='5') && this.UserRole==='Admin' ? true:
               (this.q.selectedOption!=='0' || this.q.selectedOption!=='5') && this.UserRole==='Admin'  ? true:
               (this.q.selectedOption==='0' || this.q.selectedOption==='5') && this.UserRole!=='Admin' ? false:
               (this.q.selectedOption!=='0' || this.q.selectedOption!=='5') && this.UserRole!=='Admin' ? false:true;
    }
    get rDisable()
    {
         return this.q.selectedOption==='0' ? false:
                this.q.selectedOption===''  ? true:true;
    }
    @api validateInput(selectOption)
    {
     console.log('Input validation',selectOption);
    }
    //validation //nikhil added validation
    req='';r=''; allRow=false; sOption='';
    @api Validity(index,selectedOption)
    {   this.sOption=selectedOption;
        const t1=this.template.querySelector("[title=actionPlan]");
        const t2=this.template.querySelector("[title=addComments]");
        const t3=this.template.querySelector("[title=reviewComment]");
        const t4=this.template.querySelector("[title=reason]");
        const Li=this.template.querySelector('lightning-input[title="date"]');
        const Lc=this.template.querySelector('lightning-combobox[title="ownerName"]');
        const ind=t1.name;
        const t5=this.template.querySelector("[title=actionPlan1]");
        const t6=this.template.querySelector("[title=actionPlan2]");
        const Lc1=this.template.querySelector('lightning-combobox[title="ownerName1"]');
        const Lc2=this.template.querySelector('lightning-combobox[title="ownerName2"]');
        const Li1=this.template.querySelector('lightning-input[title="date1"]');
        const Li2=this.template.querySelector('lightning-input[title="date2"]');
        if((ind===index)&&(selectedOption==='0'))
        {
            t1.setAttribute('disabled');
            t2.setAttribute('disabled');
            if(this.UserRole==='Admin')
            {
            t3.setAttribute('disabled');
            this.allRow=true;
            }
            if(this.UserRole==='Auditor')
            {
            t3.removeAttribute('disabled');
            this.allRow=false;
            }
            t4.removeAttribute('disabled');
            Li.disabled=true;
            Lc.disabled=true;
            this.req=' Required*';
            this.r='';
            
            if(this.dup>=1)
            {
                t5.setAttribute('disabled');
                Li1.disabled=true;
                Lc1.disabled=true;
                
            }
            if(this.dup==2)
            {
                t6.setAttribute('disabled');
                Li2.disabled=true;
                Lc2.disabled=true;
            }
        }
    }

    @api Validity2(index,selectedOption)
    {    this.sOption=selectedOption;
        const t1=this.template.querySelector("[title=actionPlan]");
        const t2=this.template.querySelector("[title=addComments]");
        const t3=this.template.querySelector("[title=reviewComment]");
        const t4=this.template.querySelector("[title=reason]");
        const Li=this.template.querySelector('lightning-input[title="date"]');
        const Lc=this.template.querySelector('lightning-combobox[title="ownerName"]');
        const ind=t1.name;
        const t5=this.template.querySelector("[title=actionPlan1]");
        const t6=this.template.querySelector("[title=actionPlan2]");
        const Lc1=this.template.querySelector('lightning-combobox[title="ownerName1"]');
        const Lc2=this.template.querySelector('lightning-combobox[title="ownerName2"]');
        const Li1=this.template.querySelector('lightning-input[title="date1"]');
        const Li2=this.template.querySelector('lightning-input[title="date2"]');
        if((ind===index)&&(selectedOption!=='0'))
        {
            t1.removeAttribute('disabled');
            t2.removeAttribute('disabled');
            t3.removeAttribute('disabled');
            t4.setAttribute('disabled');
            
            Li.disabled=false;
          
            Lc.disabled=false;
            this.req='';
            this.r=' required*';
            this.allRow=false;
            if(this.dup>=1)
            {
                t5.removeAttribute('disabled');
                Li1.disabled=false;
                Lc1.disabled=false;
                
            }
            if(this.dup==2)
            {
                t6.removeAttribute('disabled');
                Li2.disabled=false;
                Lc2.disabled=false;
            }
        }
    }
    @api Validity3(index,selectedOption)
    {    this.sOption=selectedOption;
        const t1=this.template.querySelector("[title=actionPlan]");
        const t2=this.template.querySelector("[title=addComments]");
        const t3=this.template.querySelector("[title=reviewComment]");
        const t4=this.template.querySelector("[title=reason]");
        const Li=this.template.querySelector('lightning-input[title="date"]');
        const Lc=this.template.querySelector('lightning-combobox[title="ownerName"]');
        const ind=t1.name;
        const t5=this.template.querySelector("[title=actionPlan1]");
        const t6=this.template.querySelector("[title=actionPlan2]");
        const Lc1=this.template.querySelector('lightning-combobox[title="ownerName1"]');
        const Lc2=this.template.querySelector('lightning-combobox[title="ownerName2"]');
        const Li1=this.template.querySelector('lightning-input[title="date1"]');
        const Li2=this.template.querySelector('lightning-input[title="date2"]');
        if((ind===index)&&(selectedOption!=='0'))
        {
            t1.removeAttribute('disabled');
            t2.removeAttribute('disabled');
            if(this.UserRole==='Admin')
            {
            t3.setAttribute('disabled');
            this.allRow=false;
            }
            if(this.UserRole==='Auditor')
            {
            t3.removeAttribute('disabled');
            this.allRow=false;
            }
            t4.setAttribute('disabled');
           
            Li.disabled=false;
          
            Lc.disabled=false;
            
            this.req='';
        
            if(this.dup>=1)
            {
                t5.removeAttribute('disabled');
                Li1.disabled=false;
                Lc1.disabled=false;
                
            }
            if(this.dup==2)
            {
                t6.removeAttribute('disabled');
                Li2.disabled=false;
                Lc2.disabled=false;
            }
        }
    }
    @api Validity4(index,selectedOption)
    {    this.sOption=selectedOption;
        const t1=this.template.querySelector("[title=actionPlan]");
        const t2=this.template.querySelector("[title=addComments]");
        const t3=this.template.querySelector("[title=reviewComment]");
        const t4=this.template.querySelector("[title=reason]");
        const Li=this.template.querySelector('lightning-input[title="date"]');
        const Lc=this.template.querySelector('lightning-combobox[title="ownerName"]');
        const ind=t1.name;
        const t5=this.template.querySelector("[title=actionPlan1]");
        const t6=this.template.querySelector("[title=actionPlan2]");
        const Lc1=this.template.querySelector('lightning-combobox[title="ownerName1"]');
        const Lc2=this.template.querySelector('lightning-combobox[title="ownerName2"]');
        const Li1=this.template.querySelector('lightning-input[title="date1"]');
        const Li2=this.template.querySelector('lightning-input[title="date2"]');
        if((ind===index)&&(selectedOption!=='0'))
        {
            t1.setAttribute('disabled');
            t2.removeAttribute('disabled');
            if(this.UserRole==='Admin')
            {
            t3.setAttribute('disabled');
            this.allRow=true;
            }
            if(this.UserRole==='Auditor')
            {
            t3.removeAttribute('disabled');
            this.allRow=false;
            }
           
            Li.disabled=true;
           
            Lc.disabled=true;
          
            this.req='';
            this.r='';
            
            if(this.dup>=1)
            {
                t5.setAttribute('disabled');
                Li1.disabled=true;
                Lc1.disabled=true;
                
            }
            if(this.dup==2)
            {
                t6.setAttribute('disabled');
                Li2.disabled=true;
                Lc2.disabled=true;
            }
        }
    }
    @api checkValues(index,sqrid,type,subtype,selectedOption)
    {   this.sOption=selectedOption;
        const t1=this.template.querySelector("[title=actionPlan]");
        const ind=t1.name;
        if((ind===index)&&(selectedOption!=='0' && selectedOption!=='5'))
        {
            if(this.q.actionPlan!="" && this.q.ownerName!="" && this.q.dateToBeCompleted!="")
            {
                if(this.q.additionalComments!="")
                { console.log('hey i am here too');
                    const filterChangeEvent = new CustomEvent('filterchange', {
                        bubbles: true, composed:true,detail: {'actionPlan':this.q.actionPlan,'ownerName':this.q.ownerName,'dateToBeCompleted':this.q.dateToBeCompleted,'additionalComments':this.q.additionalComments,'reasonForNotApplicable':'','questionId':
                        index,'sqrid':sqrid,'type':type,'subType':subtype},
                    });
                    this.dispatchEvent(filterChangeEvent);
                }
                else
                {
                    const filterChangeEvent = new CustomEvent('filterchange', {
                        bubbles: true, composed:true,detail: {'actionPlan':this.q.actionPlan,'ownerName':this.q.ownerName,'dateToBeCompleted':this.q.dateToBeCompleted,'additionalComments':'','reasonForNotApplicable':'','questionId':
                        index,'sqrid':sqrid,'type':type,'subType':subtype},
                    });
                    this.dispatchEvent(filterChangeEvent);
                }
            }
        }
    }
    @api checkValues0(index,sqrid,type,subtype,selectedOption)
    {   this.sOption=selectedOption;
        const t1=this.template.querySelector("[title=actionPlan]");
        const ind=t1.name;
        if((ind===index)&&(selectedOption==='0'))
        { console.log('hey i am here');
            if(this.q.actionPlan!="" && this.q.ownerName!="" && this.q.dateToBeCompleted!="")
            { console.log('hey i am here 2');
                if(this.q.additionalComments!="")
                {  console.log('hey i am here 3');
                    const filterChangeEvent = new CustomEvent('filterchange', {
                        bubbles: true, composed:true,detail: {'actionPlan':'','ownerName':'','dateToBeCompleted':'','additionalComments':'','reasonForNotApplicable':'','questionId':
                        index,'sqrid':sqrid,'type':type,'subType':subtype},
                    });
                    this.dispatchEvent(filterChangeEvent);
                }
                else
                {  console.log('hey i am here 4');
                    const filterChangeEvent = new CustomEvent('filterchange', {
                        bubbles: true, composed:true,detail: {'actionPlan':'','ownerName':'','dateToBeCompleted':'','reasonForNotApplicable':'','questionId':
                        index,'sqrid':sqrid,'type':type,'subType':subtype},
                    });
                    this.dispatchEvent(filterChangeEvent);
                }
            }
        }
    }
    @api checkValues5(index,sqrid,type,subtype,selectedOption)
    {   this.sOption=selectedOption;
        const t1=this.template.querySelector("[title=actionPlan]");
        const ind=t1.name;
        if((ind===index)&&(selectedOption==='5'))
        {
            if(this.q.actionPlan!="" && this.q.ownerName!="" && this.q.dateToBeCompleted!="")
            {
                if(this.q.additionalComments!="")
                {
                    const filterChangeEvent = new CustomEvent('filterchange', {
                        bubbles: true, composed:true,detail: {'actionPlan':'','ownerName':'','dateToBeCompleted':'','additionalComments':this.q.additionalComments,'reasonForNotApplicable':'','questionId':
                        index,'sqrid':sqrid,'type':type,'subType':subtype},
                    });
                    this.dispatchEvent(filterChangeEvent);
                }
                else
                {
                    const filterChangeEvent = new CustomEvent('filterchange', {
                        bubbles: true, composed:true,detail: {'actionPlan':'','ownerName':'','dateToBeCompleted':'','additionalComments':'','reasonForNotApplicable':'','questionId':
                        index,'sqrid':sqrid,'type':type,'subType':subtype},
                    });
                    this.dispatchEvent(filterChangeEvent);
                }
            }
        }
    }
          
showToast(title,message,variantType){
    const event = new ShowToastEvent({
        title: title,
        message: message,
        variant: variantType,
    });
    this.dispatchEvent(event);
}
    
    get disable()
    {  
        return this.q.actionPlan1 && this.q.actionPlan2  ? true:
               this.allRow==true ? true:false
              
    }

    get addRowDisable()//need to add some rows
    {
        return this.dup!=2 ? true:
               this.q.actionPlan1 ? false:
               this.q.actionPlan2 ? false:false
    }
    get one()
    {
        return this.show0==true ? true:
               this.q.actionPlan1 ? true:false;
    }
    get two()
    {
        return this.show1==true ? true:
               this.q.actionPlan2 ? true:false;
    }
    show0=false;show1=false;
    addRow()
    {
        if(this.dup==0 && this.show0!=true)
        {
            this.show0=true;
        }
        if(this.dup==1 && this.show1!=true)
        {
            this.show1=true;
        }
        if(this.dup==1 && this.show0!=true)
        {
            this.show0=true;
        }
        this.dup=this.dup+1;

        console.log('index',this.index);
        console.log('Duplicates>'+JSON.stringify(this.duplicates));
    }
    deleteRow(event){ 
        let x=event.target.title;
        console.log('deleteTitle>'+x);
        if(x=='deleteOne')
        {  
            if(this.q.actionPlan!="" && this.q.ownerName!="" && this.q.dateToBeCompleted!=""){
            const filterChangeEvent = new CustomEvent('filterchange', {// true to false
                bubbles: false, composed:false,detail: {'actionPlan1':'','ownerName1':'','dateToBeCompleted1':'',
                'actionPlan':this.q.actionPlan,'ownerName':this.q.ownerName,'dateToBeCompleted':this.q.dateToBeCompleted,
                'questionId':event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
            });
            this.dispatchEvent(filterChangeEvent);}
            else{
                const filterChangeEvent = new CustomEvent('filterchange', {// true to false
                    bubbles: false, composed:false,detail: {'actionPlan1':'delete','ownerName1':'delete','dateToBeCompleted1':'delete','questionId':
                    event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
                });
                this.dispatchEvent(filterChangeEvent);
            }
            this.show0=false;
            if(this.dup==2)
            {
                this.show1=true;
                this.dup=this.dup-1;
            }
            else if(this.dup==1)
            {
                this.dup=this.dup-1;
            }
        }
        else if(x=='deleteTwo')
        { 
            if(this.q.actionPlan!="" && this.q.ownerName!="" && this.q.dateToBeCompleted!=""){
                const filterChangeEvent = new CustomEvent('filterchange', {// true to false
                    bubbles: false, composed:false,detail: {'actionPlan2':'','ownerName2':'','dateToBeCompleted2':'',
                    'actionPlan':this.q.actionPlan,'ownerName':this.q.ownerName,'dateToBeCompleted':this.q.dateToBeCompleted,
                    'questionId':event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
                });
                this.dispatchEvent(filterChangeEvent);}
                else{
                    const filterChangeEvent = new CustomEvent('filterchange', {// true to false
                        bubbles: false, composed:false,detail: {'actionPlan2':'delete','ownerName2':'delete','dateToBeCompleted2':'delete','questionId':
                        event.target.name,'sqrid':event.target.dataset.id,'type':event.target.dataset.type,'subType':event.target.dataset.subtype},
                    });
                    this.dispatchEvent(filterChangeEvent);
                }
            this.show1=false;
            this.dup=this.dup-1;
        }
    }

    
}
